#+TITLE:  Org Generate Pages
#+AUTHOR: Xavier Garrido
#+DATE:   2014-02-09

This file is used to publish a =org= documentation to =html= and
to =pdf= into a =doc/= directory.

* Project publish functions
Within the next sections, we will define two publishing projects :
- an HTML exporter,
- a PDF exporter.
We first clean the list of publich project and then add the HTML & PDF exporters
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
#+END_SRC
We also globally define the current directory
#+BEGIN_SRC emacs-lisp
  (setq this-directory (substitute-in-file-name "$OGP_EXPORT_DIR/"))
  (setq doc-directory (concat this-directory "doc/"))
  (setq base-name (file-name-nondirectory (directory-file-name this-directory)))
  (setq org-publish-timestamp-directory (concat "/tmp/org-timestamps/" base-name "/"))
#+END_SRC

* HTML export
** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-html)
#+END_SRC
** Use unicode for checkbox
#+BEGIN_SRC emacs-lisp
  (setq org-html-checkbox-type "unicode")
#+END_SRC
** Embedded Javascript code
*** TOC popup
#+NAME: toc.js
#+BEGIN_SRC js :results output :tangle no
  function displayTOC() {
      var first = document.getElementById(\"text-table-of-contents\").innerHTML;
      if (first != \"\") {
          var maincontent = '<a class=\"button\"><i class=\"fa fa-list\"></i></a>'
          maincontent += \"<div>\" + first + \"</div>\";
          document.getElementById(\"toc\").innerHTML = maincontent;
      } else {
          document.getElementById(\"toc\").style.display = \"none\";
      }
     }
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb yes
  (setq org-html-scripts (concat org-html-scripts "<script type=\"text/javascript\">
    <<toc.js>>
    <<rlc.js>>
    </script>
    "))
#+END_SRC
*** Random link color
#+NAME: rlc.js
#+BEGIN_SRC js :results output :tangle no
  function randomLinkColor() {
      var colors = ['#ff0000', '#00ff00', '#0000ff'];
      var random_color = colors[Math.floor(Math.random() * colors.length)];
      var elements = document.querySelectorAll('a');
      [].slice.call(elements).forEach(function(elem) {
          //elem.style.color = random_color;
      });
  }
#+END_SRC
** Mathjax configuration
#+BEGIN_SRC emacs-lisp :noweb yes
    ;; (setq org-html-mathjax-options '((path  "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")))
  (setq org-html-mathjax-template "<script type=\"text/x-mathjax-config\">
    <<mathjax.js>>
    </script>
    <script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>
    <div id=\"spinner\">
      <div id=\"bounce1\"></div>
      <div id=\"bounce2\"></div>
      <div id=\"bounce3\"></div>
      <small>Loading MathJax...</small>
    </div>")
#+END_SRC
*** Javascript code for Mathjax
#+NAME: mathjax.js
#+BEGIN_SRC js :results output :tangle no
  MathJax.Hub.Config({
      messageStyle: \"none\",
      TeX: {
          extensions: [\"cancel.js\"],
          Macros: {
              vv: [\"{\\\\vec{#1}}\",1],
              Upsigma: \"{\\\\Sigma}\",
              Updelta: \"{\\\\Delta}\",
              varoiint: \"{\\\\iint}\",
              varoint: \"{\\\\int}\",
              grad: \"{\\\\vec{\\\\nabla}}\",
              div: \"{\\\\vec{\\\\nabla}.}\",
              rot: \"{\\\\vec{\\\\nabla}\\\\times\\\\,}\",
              ket: [\"{|#1 \\\\rangle}\",1],
              bra: [\"{\\\\langle#1|}\",1],
              psh: [\"{\\\\langle#1|#2 \\\\rangle}\",2],
              bm: [\"{\\\\boldsymbol #1}\",1]
          }
      }
  });
  MathJax.Hub.Register.StartupHook(\"TeX Jax Ready\",function () {
      var TEX = MathJax.InputJax.TeX;
      TEX.Definitions.macros.unit = \"jaxunit\";
      TEX.Parse.Augment({
          jaxunit: function (name) {
              var n = this.GetBrackets(name),
              unit = this.GetArgument(name)
              if (n == null) {n = \"\"}
              var tex = n + '\\\\,\\\\text{'+unit+'}';
              this.string = tex + this.string.slice(this.i); this.i = 0;
          }
      });
  });
  MathJax.Hub.Queue(function () {
      document.getElementById(\"spinner\").style.display = \"none\";
  });
#+END_SRC
** Project definition
#+BEGIN_SRC emacs-lisp :noweb yes
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))

  (setq org-html-style-default "")
  (setq org-html-htmlize-output-type 'css)

  (add-to-list
   'org-publish-project-alist
   `("html-documentation"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "html" doc-directory)
     :publishing-function org-html-publish-to-html
     ;;:exclude ""
     :recursive nil
     :section-numbers 3
     :with-toc        2
     :time-stamp-file nil
     :html-head "<link rel=\"stylesheet\" href=\"css/styles.css\" />
                 <link rel=\"stylesheet\" href=\"css/org-pygments.css\" />
                 <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\" />"
     :html-preamble ""
     :html-postamble "__cvs_version__"))
  (add-to-list
   'org-publish-project-alist
   `("html-documentation-recursive"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "html" doc-directory)
     :publishing-function org-html-publish-to-html
     :recursive t
     :section-numbers 3
     :with-toc        2
     :time-stamp-file nil
     :html-head "<link rel=\"stylesheet\" href=\"css/styles.css\" />
                 <link rel=\"stylesheet\" href=\"css/org-pygments.css\" />
                 <link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\" />"
     :html-preamble ""
     :html-postamble "__cvs_version__"))
  #+END_SRC
** Markup filtering
*** SN@ilWare keyword                                               :notused:
#+BEGIN_SRC emacs-lisp
  (defun html::filter-keyword (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "SN@ilWare"
                                "<font style=\"text-decoration: overline;\">SN@il</font><font style=\"text-decoration: underline;\">Ware</font>"
                                contents)))
  ;;(add-to-list 'org-export-filter-final-output-functions 'html::filter-keyword)
#+END_SRC
*** Change frame of table and set it to void
#+BEGIN_SRC emacs-lisp
  (defun html::void-table-frame (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "hsides" "void" contents)))
  (add-to-list 'org-export-filter-final-output-functions 'html::void-table-frame)
#+END_SRC
*** Remove toc and footnotes name
#+BEGIN_SRC emacs-lisp
  (defun html::remove-toc-footnote (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "Table of Contents" ""
      (replace-regexp-in-string "Footnotes:" ""
      (replace-regexp-in-string "<body>" "<body onload=\"displayTOC();randomLinkColor();\"><div id=\"toc\"></div>" contents)
      ))))
  (add-to-list 'org-export-filter-final-output-functions 'html::remove-toc-footnote)
#+END_SRC

*** Hook
**** Change image extension
#+BEGIN_SRC emacs-lisp
  (defun html::replace-img-ext-hook (backend)
    (when (eq backend 'html)
      (while (re-search-forward "[.]pdf" nil t)
        (replace-match  ".png"))
      ))
  (add-hook 'org-export-before-parsing-hook 'html::replace-img-ext-hook)
#+END_SRC

** CSS stylesheets
*** Main stylesheets
:PROPERTIES:
:MKDIRP: yes
:TANGLE: (concat this-directory "doc/html/css/styles.css")
:END:
**** Google fonts
#+BEGIN_SRC css
  @import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
  @import url(https://fonts.googleapis.com/css?family=Open+Sans);
  @import url(http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:400,700);
  @import url(https://fonts.googleapis.com/css?family=Inconsolata);
#+END_SRC

**** Main =css= definitions
***** Body
#+BEGIN_SRC css
  body {
      width: 800px;
      margin: 0 auto;
      padding: 50px;
      color: #555555;
      font-family: 'Open Sans';
      font-size: 10pt;
      /*font: 14px/1.5 Lato, sans-serif;
      font-weight: 300;*/
  }
#+END_SRC

***** Headline
#+BEGIN_SRC css
  h1, h2, h3, h4, h5, h6 {
      font-family: "Yanone Kaffeesatz", sans-serif;
      margin:0 0 20px;
  }

  h1, h2, h3 {
      line-height:1.1;
  }

  h1 {
      color:#393939;
      margin: 0 0 40px;
      padding: 0;
      font-size: 300%;
  }

  h2 {
      color:#494949;
      font-size: 200%;
  }

  h3 {
      color:#555555;
      font-size: 175%;
  }

  h4, h5, h6 {
      color:#777777;
      font-size: 150%;
  }
#+END_SRC

***** Link
#+BEGIN_SRC css
  a {
      color: #67ad00;
      text-decoration:none;
  }

  a:hover {
      opacity:0.75;
  }

  a small {
      font-size:11px;
      color:#777777;
      margin-top:-0.6em;
      display:block;
  }

  a:hover small {
      opacity:0.75;
  }
#+END_SRC

***** Code, table, image
#+BEGIN_SRC css
  p, ul, ol, table, pre, dl {
      /*margin:0 0 20px;*/
  }

  blockquote {
      border-left:1px solid #e5e5e5;
      margin:0;
      padding:0 0 0 20px;
      font-style:italic;
  }

  code, pre {
      font-family:Inconsolata;
      color:#777777;
      font-size:12px;
  }

  code {
      display:inline-block;
      white-space:no-wrap;
      background:#fff;
      font-size:.8em;
      line-height:1.5em;
      border:1px solid #e5e5e5;
      -webkit-border-radius:0.4em;
      -moz-border-radius:0.4em;
      -ms-border-radius:0.4em;
      -o-border-radius:0.4em;
      border-radius:0.4em;
      padding:0 .3em;
      margin:-1px 0
  }

  pre {
      padding:8px 15px;
      background: #f8f8f8;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  table {
      width:80%;
      border-collapse:collapse;
      margin-left:auto;
      margin-right:auto;
      margin-top: 20px;
  }

  .table-number {
      font-weight:700;
  }

  th, td {
      text-align:left;
      padding:5px 10px;
      border-bottom:1px solid #e5e5e5;
  }

  dt {
      color:#444444;
      font-weight:700;
  }

  th {
      color:#444444;
  }

  img {
      max-width:100%;
  }

  img.hidden {
      display: none;
  }

  .figure {
      text-align: center;
  }

  .figure-number {
      font-weight:700;
  }
#+END_SRC
***** TOC
#+BEGIN_SRC css
  #table-of-contents {
      margin-bottom: 40px;
  }

  #toc {
      position: fixed;
      top: 10px;
      right: 20px;
  }

  #toc .button {
      padding-right: 5px;
      position: fixed;
      right: inherit;
      cursor: pointer;
      font-size: 20px;
  }

  #toc div {
      height: 0;
      width: 0;
      margin-top: 35px;
      font-size: 11px;
  }

  #toc:hover div {
      width: 250px;
      height: auto;
      padding-right: 1.5em;
      background: #FFFFFF;
      /*opacity: .85;*/
      box-shadow: 0 1px 2px rgba(0,0,0,0.3);
      border-radius:4px;
      overflow: hidden;
  }

  #toc ul {
      color: #67ad00;
  }
#+END_SRC

Adding a small triangle on top to match the position of triggered icon
#+BEGIN_SRC css
  #toc:hover:before {
      content: "";
      position:absolute;
      top:19px;
      right:10px;
      width:0;height:0;
      border-color: transparent transparent rgba(0,0,0,0.03) transparent;
      border-width:8px;
      border-style:solid;
  }

  #toc:hover:after {
      content: "";
      position:absolute;
      top:20px;
      right:10px;
      width:0;height:0;
      border-color: transparent transparent #ffffff transparent;
      border-width:8px;
      border-style:solid;
  }
#+END_SRC

***** Spinners
When MathJax is loading, we replace the default messages of MathJax by some
spinners on the bottom-left side of the page
#+BEGIN_SRC css
  #spinner {
      position: fixed;
      bottom: 10px;
      left: 20px;
  }

  #spinner > div {
      width: 8px;
      height: 8px;
      background-color: #555555;
      border-radius: 100%;
      display: inline-block;
      -webkit-animation: bouncedelay 1.4s infinite ease-in-out;
      animation: bouncedelay 1.4s infinite ease-in-out;
      /* Prevent first frame from flickering when animation starts */
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
  }

  #spinner #bounce1 {
      -webkit-animation-delay: -0.32s;
      animation-delay: -0.32s;
  }

  #spinner #bounce2 {
      -webkit-animation-delay: -0.16s;
      animation-delay: -0.16s;
  }

  @-webkit-keyframes bouncedelay {
      0%, 80%, 100% { -webkit-transform: scale(0.0) }
      40% { -webkit-transform: scale(1.0) }
  }

  @keyframes bouncedelay {
      0%, 80%, 100% {
          transform: scale(0.0);
          -webkit-transform: scale(0.0);
      } 40% {
          transform: scale(1.0);
          -webkit-transform: scale(1.0);
      }
  }
#+END_SRC

***** Misc. (bold, =hr= style)
#+BEGIN_SRC css
  #content {
      width:700px;
      float:right;
      padding-bottom:50px;
  /* border:1px solid #e5e5e5; */
  /* border-width:1px 0; */
  /* padding:20px 0; */
  /* margin:0 0 20px; */
  }

  strong {
      color:#222;
      font-weight:700;
  }

  small {
      font-size:11px;
  }

  hr {
      border:0;
      background:#e5e5e5;
      height:1px;
      margin:0 0 20px;
  }

  .footpara {
      display: inline;
  }
#+END_SRC

***** Scrollbars
#+BEGIN_SRC css
  .scrollbar-container {
      position: absolute;
      top: 0; bottom: 0; left: 0; right: 0;
      margin: 20px;

      border: 4px solid rgba(0, 0, 0, 0.2);
      overflow: auto;
      background-color: whiteSmoke;
  }
  .scrollbar-container .inner {
      height: 2011px;
      width: 1985px;
      padding: 1em;
      background-color: white;
      font-family: sans-serif;
  }
  ::-webkit-scrollbar {
      background: transparent;
  }
  ::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.2);
      border: solid whiteSmoke 4px;
      border-radius:15px;
  }
  ::-webkit-scrollbar-thumb:hover {
      background-color: rgba(0, 0, 0, 0.3);
  }
#+END_SRC

***** Header
#+BEGIN_SRC css
  header {
      width:270px;
      float:left;
      position:fixed;
  }

  header ul {
      list-style:none;
      height:40px;

      padding:0;

      background: #eee;
      background: -moz-linear-gradient(top, #f8f8f8 0%, #dddddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f8f8f8), color-stop(100%,#dddddd));
      background: -webkit-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -o-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -ms-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: linear-gradient(top, #f8f8f8 0%,#dddddd 100%);

      border-radius:5px;
      border:1px solid #d2d2d2;
      box-shadow:inset #fff 0 1px 0, inset rgba(0,0,0,0.03) 0 -1px 0;
      width:270px;
  }

  header li {
      width:89px;
      float:left;
      border-right:1px solid #d2d2d2;
      height:40px;
  }

  header li:first-child a {
      border-radius:5px 0 0 5px;
  }

  header li:last-child a {
      border-radius:0 5px 5px 0;
  }

  header ul a {
      line-height:1;
      font-size:11px;
      color:#999;
      display:block;
      text-align:center;
      padding-top:6px;
      height:34px;
  }

  header ul a:hover {
      color:#999;
      background: -moz-linear-gradient(top, #fff 0%, #ddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#fff), color-stop(100%,#ddd));
      background: -webkit-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -o-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -ms-linear-gradient(top, #fff 0%,#ddd 100%);
      background: linear-gradient(top, #fff 0%,#ddd 100%);
  }

  header ul a:active {
      -webkit-box-shadow: inset 0px 2px 2px 0px #ddd;
      -moz-box-shadow: inset 0px 2px 2px 0px #ddd;
      box-shadow: inset 0px 2px 2px 0px #ddd;
  }

  header ul li + li {
      width:88px;
      border-left:1px solid #fff;
  }

  header ul li + li + li {
      border-right:none;
      width:89px;
  }

  header ul a strong {
      font-size:14px;
      display:block;
      color:#222;
  }
#+END_SRC

***** Footer
#+BEGIN_SRC css
  footer {
      width:270px;
      float:left;
      position:fixed;
      bottom:50px;
  }
#+END_SRC

***** Preamble, postamble
#+BEGIN_SRC css
  #preamble {
      /* font-size:1.1em; */
      text-transform:uppercase;
      float:left;
      margin-left:-6em;
      width:15em;
      text-align:right;
      position:fixed;
  }

  #preamble a {
      display:block;
      padding:0.2em 1em;
      color:#39c;
  }

  #preamble a:hover {
      background-color:#39c;
      text-decoration:none;
      color:#f9f9f9;
      -webkit-transition:color .2s linear;
  }

  #postamble {
      clear: both;
      text-align: center;
      font-size:10px;
  }
#+END_SRC

***** Adapting media source
#+BEGIN_SRC css
  @media print, screen and (max-width: 960px) {

      body {
          width:auto;
          margin:0;
      }

      header, content, footer {
          float:none;
          position:static;
          width:auto;
      }

      header {
          padding-right:320px;
      }

      header a small {
          display:inline;
      }

      header ul {
          position:absolute;
          right:50px;
          top:52px;
      }
  }

  @media print, screen and (max-width: 720px) {
      body {
          word-wrap:break-word;
      }

      header {
          padding:0;
      }

      header ul, header p.view {
          position:static;
      }

      pre, code {
          word-wrap:normal;
      }
  }

  @media print, screen and (max-width: 480px) {
      body {
          padding:15px;
      }

      header ul {
          display:none;
      }
  }

  @media print {
      body {
          padding:0.4in;
          font-size:12pt;
          color:#444;
      }
  }
#+END_SRC

*** Org source code styles
:PROPERTIES:
:MKDIRP: yes
:TANGLE: (concat this-directory "doc/html/css/org-pygments.css")
:END:

#+BEGIN_SRC css
  .org-string,
  .org-type {
      color: #DEB542;
  }

  .org-builtin,
  .org-variable-name,
  .org-constant,
  .org-function-name {
      color: #67ad00;
  }

  .org-comment,
  .org-comment-delimiter,
  .org-doc {
      color: #93a1a1;
  }

  .org-keyword {
      color: #69B7F0;/*#D33682;*/
  }

  pre {
      color: #777777;
  }
#+END_SRC

* PDF export
** LaTeX style file
*** VC status
:PROPERTIES:
:MKDIRP:   yes
:TANGLE:   (concat this-directory "doc/pdf/vc-style.sty")
:END:

#+NAME: vc-status
#+BEGIN_SRC sh :results output :tangle no
  (
  cd $OGP_EXPORT_DIR
  if [ -d .svn ]; then
    status=$(LC_MESSAGES=en svn info)
    rev=$(echo -e $status | sed -n 's/.*Revision: *\([^ ]*\).*/\1/p')
    date=$(echo -e $status | sed -n 's/.*Last Changed Date: *\([^ ]*\).*/\1/p')
    url=$(echo -e $status | sed -n 's/.*URL: *\([^ ]*\).*/\1/p')
    log="\texttt{svn} revision \href{$url}{\color{gray}\texttt{${rev}}} \$-\$ ${date}"
  else
    url=$(git config --get remote.origin.url | sed -e 's#git@github.com:#https://github.com/#' -e 's#\.git##')
    log=$(LC_MESSAGES=en git --no-pager log -1 HEAD --date=short --pretty=format:"\texttt{git} commit \href{$url/commit/%H}{\color{gray}\texttt{%h}} - %ad")
  fi
  echo "\renewcommand*{\PrelimText}{\small\textnormal{\color{gray}${log}}}"
  )
#+END_SRC

#+BEGIN_SRC latex :noweb yes
  \RequirePackage{prelim2e}
  <<vc-status()>>
#+END_SRC

*** Deault class style
:PROPERTIES:
:MKDIRP:   yes
:TANGLE:   (concat this-directory "doc/pdf/default-class-style.sty")
:END:
**** Basics
#+BEGIN_SRC latex
  \NeedsTeXFormat{LaTeX2e}
  \ProvidesPackage{default-class-style}[2014/10/25 v0.01 Bundling a default LaTeX class for org-pages]
#+END_SRC
**** Package requirements
***** =hyperref= package
#+BEGIN_SRC latex
  \hypersetup{
    xetex,
    colorlinks=true,
    urlcolor=default,
    filecolor=default,
    linkcolor=default,
    plainpages=false,
    pdfpagelabels,
    bookmarksnumbered,
    pagebackref
  }
#+END_SRC
**** Fonts
#+BEGIN_SRC latex
  \setmonofont[Scale=0.9]{Inconsolata}
  \setsansfont[Mapping=tex-text]{Myriad Pro}
  \setromanfont[Mapping=tex-text, Numbers=OldStyle]{Minion Pro}
  \RequirePackage[eulergreek,EULERGREEK]{sansmath}
  \RequirePackage{upgreek}
  \sansmath
#+END_SRC
**** Colors
#+BEGIN_SRC latex
  \definecolor{red}{HTML}{DD2A2B}
  \definecolor{green}{HTML}{69B628}
  \definecolor{blue}{HTML}{003399}
  \definecolor{orange}{HTML}{C08040}
  \definecolor{gray}{gray}{0.7}
  \colorlet{default}{blue}
#+END_SRC
**** Minted lexer
#+BEGIN_SRC latex
  \usemintedstyle{snemo}
#+END_SRC
**** Layout
***** Geometry
#+BEGIN_SRC latex
  \RequirePackage{a4wide}
  \linespread{1.02}
#+END_SRC
***** Cover page
#+BEGIN_SRC latex
  \newcommand{\HRule}{\rule{\linewidth}{1mm}}
  \renewcommand*{\maketitle}{%
    {\color{default}
    \pagestyle{empty}
    \vspace*{\stretch{2}}
    \begin{flushright}
      \HRule
      \\[9mm]
        {
          \bf\sffamily \Huge \@title
        }
        \\[5mm]
        \HRule
        \\[9mm]
    \end{flushright}}
  }
#+END_SRC
***** Footnote
#+BEGIN_SRC latex
  \RequirePackage{fancyhdr}
  \renewcommand{\footnoterule}{%
    \vskip-\footruleskip\vskip-\footrulewidth%
    \vspace{10pt}\hrule width\columnwidth height0pt \vspace{5pt} \color{gray}}
  \renewcommand{\thefootnote}{\alph{footnote}}
  \interfootnotelinepenalty=10000
#+END_SRC
***** Caption
#+BEGIN_SRC latex
  \RequirePackage[margin=20pt,labelfont=bf,font=footnotesize,labelsep=endash]{caption}
#+END_SRC
**** Appearance tweaks
***** Remove TOC dots
#+BEGIN_SRC latex
  \renewcommand\@dotsep{10000}
#+END_SRC
***** Change TOC name
#+BEGIN_SRC latex
\renewcommand{\contentsname}{}
#+END_SRC
***** Change section colors
#+BEGIN_SRC latex
  \RequirePackage{titlesec}
  \titleformat*{\section}{\usekomafont{sectioning}\usekomafont{section}\color{default}}
#+END_SRC
***** SN@ilWare logo
#+BEGIN_SRC latex
  \RequirePackage{xspace}
  \def\Snailware{\mbox{$\overline{\text{SN@il}}$%
      \hspace{.05em}\protect\raisebox{.2ex}%
             {$\protect\underline{\text{Ware}}$}}\xspace}
#+END_SRC

** =org= to LaTeX stuff
*** Use smart quote when exporting
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes nil)
#+END_SRC
*** Place table caption below table
#+BEGIN_SRC emacs-lisp
  (setq org-latex-table-caption-above nil)
#+END_SRC
*** Code blocks
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Keep LaTeX logfiles
#+BEGIN_SRC emacs-lisp
  (setq org-latex-remove-logfiles nil)
#+END_SRC

*** Default list of LaTeX packages
Only include one default package and remove all the crapppy stuff included by
=org= \rightarrow =latex= translation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Templates
**** Default
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("default-class"
                 "\\documentclass{scrartcl}
                  [PACKAGES]
                  \\usepackage{default-class-style}
                  \\usepackage{vc-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
**** Teaching template
To be used, we would have to install [[https://github.com/xgarrido/latex-templates]]
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("teaching-class"
                 "\\documentclass{scrartcl}
                  [PACKAGES]
                  \\usepackage[oldschool]{teaching-classes-style}
                  \\usepackage{vc-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** =minted= setup

Code fragments are syntax highlighted using [[https://code.google.com/p/minted/][minted]] LaTeX package
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("fontsize" "\\footnotesize")
          ("mathescape" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC
*** Set LaTeX command
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process '("latexmk -xelatex -shell-escape %f"))
#+END_SRC

*** Markup filter
**** SN@ilWare filter
#+BEGIN_SRC emacs-lisp
  (defun latex::snailware-keyword-filter (contents backend info)
    (when (eq backend 'latex)
      (replace-regexp-in-string "SN@ilware" "\\\\Snailware" contents)))
  (add-to-list 'org-export-filter-final-output-functions 'latex::snailware-keyword-filter)
#+END_SRC
**** Change =table= into =figure= env
When graphics are placed into table cells then change the default table
environment into figure
#+BEGIN_SRC emacs-lisp
  (defun latex::multicolumn-figure (contents backend info)
    (when (and (org-export-derived-backend-p backend 'latex)
               (string-match "table" contents)
               (string-match "includegraphics" contents))
      (replace-regexp-in-string "table" "figure" contents)))
  (add-to-list 'org-export-filter-table-functions 'latex::multicolumn-figure)
#+END_SRC

**** Change =.org= extension to =.pdf=
#+BEGIN_SRC emacs-lisp
  (defun latex::filter-link (contents backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\\\.org" ".pdf" contents)))
  (add-to-list 'org-export-filter-link-functions 'latex::filter-link)
#+END_SRC
** Project definition
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-publish-project-alist
   `("pdf-documentation"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "pdf" doc-directory)
     :publishing-function org-latex-publish-to-pdf
     ;;:exclude ""
     :recursive nil
     :section-numbers 2
     :with-toc        t
     :latex-class "default-class"
     :latex-header-extra ""
     ))
  (add-to-list
   'org-publish-project-alist
   `("pdf-documentation-recursive"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "pdf" doc-directory)
     :publishing-function org-latex-publish-to-pdf
     ;;:exclude ""
     :recursive t
     :section-numbers 2
     :with-toc        t
     :latex-class "default-class"
     :latex-header-extra ""
     ))
#+END_SRC

* Exporter functions
#+BEGIN_SRC emacs-lisp
  (defun org-publish-html ()
    (progn
      (org-publish-project "html-documentation" 'force)
      (copy-file (expand-file-name "README.html" (expand-file-name "html" doc-directory))
                 (expand-file-name "index.html" (expand-file-name "html" doc-directory)) t)
      ))
  (defun org-publish-html-recursive ()
    (progn
      (org-publish-project "html-documentation-recursive" 'force)
      (copy-file (expand-file-name "README.html" (expand-file-name "html" doc-directory))
                 (expand-file-name "index.html" (expand-file-name "html" doc-directory)) t)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun org-publish-pdf ()
    (progn
      (org-publish-project "pdf-documentation" 'force)
      ))
  (defun org-publish-pdf-recursive ()
    (progn
      (org-publish-project "pdf-documentation-recursive" 'force)
      ))
#+END_SRC
