#+TITLE:  Org Generate Pages
#+AUTHOR: Xavier Garrido
#+DATE:   2014-02-09

This file is used to publish a =org= documentation to =html= and
to =pdf= into a =doc/= directory.

* Project publish functions
Within the next sections, we will define two publishing projects :
- an HTML exporter,
- a PDF exporter.
We first clean the list of publich project and then add the HTML & PDF exporters
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
#+END_SRC
We also globally define the current directory
#+BEGIN_SRC emacs-lisp
  (setq doc-directory (concat this-directory "doc/"))
#+END_SRC
* HTML export
** Requirements
#+BEGIN_SRC emacs-lisp
  (require 'ox-html)
#+END_SRC
** Building html postamble
#+NAME: html-postamble
#+BEGIN_SRC sh :tangle no :results output
  if [ -d .git ]; then
      LC_MESSAGES=en git --no-pager log -1 HEAD --date=short --pretty=format:"File under git version control - commit %h - %ad"
  fi
#+END_SRC
** Project definition
#+BEGIN_SRC emacs-lisp :noweb yes
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))

  (setq org-html-style-default "")
  (setq org-html-htmlize-output-type 'css)

  (add-to-list
   'org-publish-project-alist
   `("html-documentation"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "html" doc-directory)
     :publishing-function org-html-publish-to-html
     ;;:exclude ""
     :recursive nil
     :section-numbers 2
     :with-toc        2
     :time-stamp-file nil
     :html-head "<link rel=\"stylesheet\" href=\"css/styles.css\">
                 <link rel=\"stylesheet\" href=\"css/org-pygments.css\">"
     :html-preamble ""
     :html-postamble "<<html-postamble()>>")
   `("html-documentation-recursive"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "html" doc-directory)
     :publishing-function org-html-publish-to-html
     :recursive t
     :section-numbers 2
     :with-toc        2
     :time-stamp-file nil
     :html-head "<link rel=\"stylesheet\" href=\"css/styles.css\">
                 <link rel=\"stylesheet\" href=\"css/org-pygments.css\">"
     :html-preamble ""
     :html-postamble "<<html-postamble()>>"))
  #+END_SRC
** Markup filtering
We replace all occurences of =.org= that are related to internal =org= files to
=.html= to make link working all together.

#+BEGIN_SRC emacs-lisp
  (defun html::filter-keyword (contents backend info)
    (when (eq backend 'html)
      (replace-regexp-in-string "SN@ilWare"
                                "<font style=\"text-decoration: overline;\">SN@il</font><font style=\"text-decoration: underline;\">Ware</font>"
                                contents)))
  ;;(add-to-list 'org-export-filter-final-output-functions 'html::filter-keyword)
#+END_SRC

** CSS stylesheets
*** Main stylesheets
:PROPERTIES:
:MKDIRP: yes
:TANGLE: (concat this-directory "doc/html/css/styles.css")
:END:
**** Google fonts
#+BEGIN_SRC css
  @import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
  @import url(https://fonts.googleapis.com/css?family=Open+Sans);
  @import url(http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:400,700);
  @import url(https://fonts.googleapis.com/css?family=Inconsolata);
#+END_SRC

**** Main =css= definitions
***** Body
#+BEGIN_SRC css
  body {
      width: 800px;
      margin: 0 auto;
      padding: 50px;
      color: #777777;
      font-family: 'Open Sans';
      font-size: 10pt;
      font-weight: 400;
      /*font: 14px/1.5 Lato, sans-serif;
      font-weight: 300;*/
  }
#+END_SRC

***** Headline
#+BEGIN_SRC css
  h1, h2, h3, h4, h5, h6 {
      font-family: "Yanone Kaffeesatz", sans-serif;
      margin:0 0 20px;
  }

  h1, h2, h3 {
      line-height:0.5;
  }

  h1 {
      color:#393939;
      margin: 0 0 50px;
      padding: 0;
      font-size: 300%;
  }

  h2 {
      color:#494949;
      font-size: 175%;
  }

  h3 {
      color:#555555;
      font-size: 125%;
  }

  h4, h5, h6 {
      color:#777777;
      font-size: 110%;
  }
#+END_SRC

***** Link
#+BEGIN_SRC css
  a {
      color: #67ad00; /*#3399cc;*/
      font-weight:400;
      text-decoration:none;
  }

  a:hover {
      color: #7fd600;/*#006699;*/
  }

  a small {
      font-size:11px;
      color:#777777;
      margin-top:-0.6em;
      display:block;
  }

  a:hover small {
      color:#777777;
  }
#+END_SRC

***** Code, table, image
#+BEGIN_SRC css
  p, ul, ol, table, pre, dl {
      margin:0 0 20px;
  }

  blockquote {
      border-left:1px solid #e5e5e5;
      margin:0;
      padding:0 0 0 20px;
      font-style:italic;
  }

  code, pre {
      font-family:Inconsolata;
      color:#777;
      font-size:12px;
  }

  pre {
      padding:8px 15px;
      background: #f8f8f8;
      border-radius:5px;
      border:1px solid #e5e5e5;
      overflow-x: auto;
  }

  table {
      width:80%;
      border-collapse:collapse;
      margin-left:auto;
      margin-right:auto;
  }

  th, td {
      text-align:left;
      padding:5px 10px;
      border-bottom:1px solid #e5e5e5;
  }

  dt {
      color:#444;
      font-weight:700;
  }

  th {
      color:#444;
  }

  img {
      max-width:100%;
  }
#+END_SRC
***** Misc. (bold, =hr= style)
#+BEGIN_SRC css
  #content {
      width:700px;
      float:right;
      padding-bottom:50px;
  /* border:1px solid #e5e5e5; */
  /* border-width:1px 0; */
  /* padding:20px 0; */
  /* margin:0 0 20px; */
  }

  strong {
      color:#222;
      font-weight:700;
  }
  small {
      font-size:11px;
  }

  hr {
      border:0;
      background:#e5e5e5;
      height:1px;
      margin:0 0 20px;
  }

  .footpara {
      display: inline;
  }
#+END_SRC

***** Scrollbars
#+BEGIN_SRC css
  .scrollbar-container {
      position: absolute;
      top: 0; bottom: 0; left: 0; right: 0;
      margin: 20px;

      border: 4px solid rgba(0, 0, 0, 0.2);
      overflow: auto;
      background-color: whiteSmoke;
  }
  .scrollbar-container .inner {
      height: 2011px;
      width: 1985px;
      padding: 1em;
      background-color: white;
      font-family: sans-serif;
  }
  ::-webkit-scrollbar {
      background: transparent;
  }
  ::-webkit-scrollbar-thumb {
      background-color: rgba(0, 0, 0, 0.2);
      border: solid whiteSmoke 4px;
      border-radius:15px;
  }
  ::-webkit-scrollbar-thumb:hover {
      background-color: rgba(0, 0, 0, 0.3);
  }
#+END_SRC

***** Header
#+BEGIN_SRC css
  header {
      width:270px;
      float:left;
      position:fixed;
  }

  header ul {
      list-style:none;
      height:40px;

      padding:0;

      background: #eee;
      background: -moz-linear-gradient(top, #f8f8f8 0%, #dddddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#f8f8f8), color-stop(100%,#dddddd));
      background: -webkit-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -o-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: -ms-linear-gradient(top, #f8f8f8 0%,#dddddd 100%);
      background: linear-gradient(top, #f8f8f8 0%,#dddddd 100%);

      border-radius:5px;
      border:1px solid #d2d2d2;
      box-shadow:inset #fff 0 1px 0, inset rgba(0,0,0,0.03) 0 -1px 0;
      width:270px;
  }

  header li {
      width:89px;
      float:left;
      border-right:1px solid #d2d2d2;
      height:40px;
  }

  header li:first-child a {
      border-radius:5px 0 0 5px;
  }

  header li:last-child a {
      border-radius:0 5px 5px 0;
  }

  header ul a {
      line-height:1;
      font-size:11px;
      color:#999;
      display:block;
      text-align:center;
      padding-top:6px;
      height:34px;
  }

  header ul a:hover {
      color:#999;
      background: -moz-linear-gradient(top, #fff 0%, #ddd 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#fff), color-stop(100%,#ddd));
      background: -webkit-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -o-linear-gradient(top, #fff 0%,#ddd 100%);
      background: -ms-linear-gradient(top, #fff 0%,#ddd 100%);
      background: linear-gradient(top, #fff 0%,#ddd 100%);
  }

  header ul a:active {
      -webkit-box-shadow: inset 0px 2px 2px 0px #ddd;
      -moz-box-shadow: inset 0px 2px 2px 0px #ddd;
      box-shadow: inset 0px 2px 2px 0px #ddd;
  }

  header ul li + li {
      width:88px;
      border-left:1px solid #fff;
  }

  header ul li + li + li {
      border-right:none;
      width:89px;
  }

  header ul a strong {
      font-size:14px;
      display:block;
      color:#222;
  }
#+END_SRC

***** Footer
#+BEGIN_SRC css
  footer {
      width:270px;
      float:left;
      position:fixed;
      bottom:50px;
  }
#+END_SRC

***** Preamble, postamble
#+BEGIN_SRC css
  #preamble {
      /* font-size:1.1em; */
      text-transform:uppercase;
      float:left;
      margin-left:-6em;
      width:15em;
      text-align:right;
      position:fixed;
  }

  #preamble a {
      display:block;
      padding:0.2em 1em;
      color:#39c;
  }

  #preamble a:hover {
      background-color:#39c;
      text-decoration:none;
      color:#f9f9f9;
      -webkit-transition:color .2s linear;
  }

  #postamble {
      clear: both;
      text-align: center;
      font-size:10px;
  }
#+END_SRC

***** Adapting media source
#+BEGIN_SRC css
  @media print, screen and (max-width: 960px) {

      body {
          width:auto;
          margin:0;
      }

      header, content, footer {
          float:none;
          position:static;
          width:auto;
      }

      header {
          padding-right:320px;
      }

      header a small {
          display:inline;
      }

      header ul {
          position:absolute;
          right:50px;
          top:52px;
      }
  }

  @media print, screen and (max-width: 720px) {
      body {
          word-wrap:break-word;
      }

      header {
          padding:0;
      }

      header ul, header p.view {
          position:static;
      }

      pre, code {
          word-wrap:normal;
      }
  }

  @media print, screen and (max-width: 480px) {
      body {
          padding:15px;
      }

      header ul {
          display:none;
      }
  }

  @media print {
      body {
          padding:0.4in;
          font-size:12pt;
          color:#444;
      }
  }
#+END_SRC

*** Org source code styles
:PROPERTIES:
:MKDIRP: yes
:TANGLE: (concat this-directory "doc/html/css/org-pygments.css")
:END:

#+BEGIN_SRC css
  .org-string,
  .org-type {
      color: #DEB542;
  }

  .org-builtin,
  .org-variable-name,
  .org-constant,
  .org-function-name {
      color: #67ad00; /* #69B7F0;*/
  }

  .org-comment,
  .org-comment-delimiter,
  .org-doc {
      color: #93a1a1;
  }

  .org-keyword {
      color: #69B7F0;/*#D33682;*/
  }

  pre {
      color: #777777;
  }
#+END_SRC

* PDF export
** LaTeX style file
:PROPERTIES:
:MKDIRP: yes
:TANGLE: (concat this-directory "doc/pdf/snemo-simu-latex.sty")
:END:
*** Basics
#+BEGIN_SRC latex
  \NeedsTeXFormat{LaTeX2e}
  \ProvidesPackage{snemo-simu-latex}[2013/10/16 v0.01 Bundling of SuperNEMO simulation style]
#+END_SRC
*** Package requirements
#+BEGIN_SRC latex
  \hypersetup{
    xetex,
    colorlinks=true,
    urlcolor=blue,
    filecolor=blue,
    linkcolor=blue,
    plainpages=false,
    pdfpagelabels,
    bookmarksnumbered,
    pagebackref
  }
#+END_SRC
*** Fonts
#+BEGIN_SRC latex
  \setmonofont[Scale=0.9]{Inconsolata}
  \setsansfont[Mapping=tex-text]{Myriad Pro}
  \setromanfont[Mapping=tex-text, Numbers=OldStyle]{Minion Pro}
  \RequirePackage[eulergreek,EULERGREEK]{sansmath}
  \sansmath
#+END_SRC
*** Colors
#+BEGIN_SRC latex
  \definecolor{red}{RGB}{221,42,43}
  \definecolor{green}{RGB}{105,182,40}
  \definecolor{blue}{RGB}{0,51,153}
  \definecolor{orange}{RGB}{192,128,64}
  \definecolor{gray}{gray}{0.7}
#+END_SRC
*** Minted lexer
#+BEGIN_SRC latex
  \usemintedstyle{snemo}
#+END_SRC
*** Layout
**** Geometry
#+BEGIN_SRC latex
  \RequirePackage{a4wide}
  \linespread{1.02}
#+END_SRC
**** Cover page
#+BEGIN_SRC latex
  \newcommand{\HRule}{\rule{\linewidth}{1mm}}
  \renewcommand*{\maketitle}{%
    {\color{blue}
    \pagestyle{empty}
    \vspace*{\stretch{2}}
    \begin{flushright}
      \HRule
      \\[9mm]
        {
          \bf\sffamily \Huge \@title
        }
        \\[5mm]
        \HRule
        \\[9mm]
    \end{flushright}}
  }
#+END_SRC
**** Footnote
#+BEGIN_SRC latex
  \RequirePackage{fancyhdr}
  \renewcommand{\footnoterule}{\color{gray}%
    \vskip-\footruleskip\vskip-\footrulewidth%
    \vspace{10pt}\hrule width\columnwidth height0pt \vspace{5pt} \color{gray}}
  \renewcommand{\thefootnote}{\alph{footnote}}
  \interfootnotelinepenalty=10000
#+END_SRC
**** Caption
#+BEGIN_SRC latex
  \RequirePackage[margin=20pt,labelfont=bf,font=footnotesize,labelsep=endash]{caption}
#+END_SRC
*** Appearance tweaks
**** Remove TOC dots
#+BEGIN_SRC latex
  \renewcommand\@dotsep{10000}
#+END_SRC
**** Change TOC name
#+BEGIN_SRC latex
  \renewcommand{\contentsname}{}
#+END_SRC
**** Change section colors
#+BEGIN_SRC latex
  \RequirePackage{titlesec}
  \titleformat*{\section}{\usekomafont{sectioning}\usekomafont{section}\color{blue}}
#+END_SRC
**** SN@ilWare logo
#+BEGIN_SRC latex
  \RequirePackage{xspace}
  \def\Snailware{\mbox{$\overline{\text{SN@il}}$%
      \hspace{.05em}\protect\raisebox{.2ex}%
             {$\protect\underline{\text{Ware}}$}}\xspace}
#+END_SRC

*** VC status
#+NAME: vc-status
#+BEGIN_SRC sh :results output :tangle no
  if [ -d .git ]; then
      log=$(LC_MESSAGES=en git --no-pager log -1 HEAD --date=short --pretty=format:"commit \texttt{%h} - %ad")
      echo "\renewcommand*{\PrelimWords}{\textnormal{\small\texttt{git}}}"
      echo "\renewcommand*{\PrelimText}{\textnormal{\small\textcolor{gray}{\PrelimWords\ ${log}}}}"
  fi
#+END_SRC
#+BEGIN_SRC latex :noweb yes
  \RequirePackage{prelim2e}
  <<vc-status()>>
#+END_SRC
** =org= to LaTeX stuff
*** Use smart quote when exporting
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC
*** Keep LaTeX logfiles
#+BEGIN_SRC emacs-lisp
  (setq org-latex-remove-logfiles nil)
#+END_SRC

*** Default list of LaTeX packages
Only include one default package and remove all the crapppy stuff included by
=org= \rightarrow =latex= translation.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Template
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("snemo-simu"
                 "\\documentclass{scrartcl}
                  [PACKAGES]
                  \\usepackage{snemo-simu-latex}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
*** =minted= setup

Code fragments are syntax highlighted using [[https://code.google.com/p/minted/][minted]] LaTeX package
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("fontsize" "\\footnotesize")
          ("mathescape" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
#+END_SRC
*** Set LaTeX command
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process '("latexmk -xelatex -shell-escape %f"))
#+END_SRC

*** Markup filter
#+BEGIN_SRC emacs-lisp
  (defun latex::snailware-keyword-filter (contents backend info)
    (when (eq backend 'latex)
      (replace-regexp-in-string "SN@ilware" "\\\\Snailware" contents)))
  (add-to-list 'org-export-filter-final-output-functions 'latex::snailware-keyword-filter)
#+END_SRC
** Project definition
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'org-publish-project-alist
   `("pdf-documentation"
     :base-directory ,this-directory
     :base-extension "org"
     :publishing-directory ,(expand-file-name "pdf" doc-directory)
     :publishing-function org-latex-publish-to-pdf
     ;;:exclude ""
     :section-numbers 2
     :with-toc        t
     :latex-class "snemo-simu"
     :latex-header-extra ""
     ))
#+END_SRC

* Exporter functions
#+BEGIN_SRC emacs-lisp
  (defun org-publish-html ()
    (progn
      (org-publish-project "html-documentation" 'force)
      (copy-file (expand-file-name "README.html" (expand-file-name "html" doc-directory))
                 (expand-file-name "index.html" (expand-file-name "html" doc-directory)) t)
      ))
  (defun org-publish-html-recursive ()
    (progn
      (org-publish-project "html-documentation-recursive" 'force)
      (copy-file (expand-file-name "README.html" (expand-file-name "html" doc-directory))
                 (expand-file-name "index.html" (expand-file-name "html" doc-directory)) t)
      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun org-publish-pdf ()
    (progn
      (org-publish-project "pdf-documentation" 'force)
      ))
#+END_SRC
